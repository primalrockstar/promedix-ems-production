// Complete ProMedix EMS Training Platform - Production Ready
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Link, useLocation, useParams, useNavigate } from 'react-router-dom';
import {
  Home, BookOpen, Heart, Activity, Calculator, CheckSquare, List, AlertTriangle,
  Settings, Search, Stethoscope, Truck, ClipboardList, Zap, Thermometer, Users,
  Award, TrendingUp, ChevronRight, Clock, Brain, FileText, Play, Target,
  CheckCircle, Star, BarChart3, MessageCircle, Mic, Eye, BookmarkIcon,
  Filter, Bell, User, Download, Plus, Minus, Shield, Baby, Wrench, HelpCircle,
  Menu, ChevronDown, AlertCircle
} from 'lucide-react';
import EMTBNavigation from './components/emtb/EMTBNavigation';

// Complete EMT-B Module Structure with All 41 Chapters
const moduleStructure = [
  {
    id: 1,
    title: "Preparatory",
    description: "Core EMS principles and professional foundations",
    color: "blue",
    icon: BookOpen,
    chapters: [
      { id: 1, title: "EMS Systems", duration: "45 min", completed: true },
      { id: 2, title: "Workforce Safety and Wellness", duration: "30 min", completed: true },
      { id: 3, title: "Medical, Legal, and Ethical Issues", duration: "40 min", completed: false },
      { id: 4, title: "Communications and Documentation", duration: "35 min", completed: false }
    ]
  },
  {
    id: 2,
    title: "Anatomy & Physiology",
    description: "Human body systems and medical terminology",
    color: "green",
    icon: Brain,
    chapters: [
      { id: 5, title: "Medical Terminology", duration: "25 min", completed: false },
      { id: 6, title: "The Human Body", duration: "60 min", completed: false },
      { id: 7, title: "Life Span Development", duration: "20 min", completed: false },
      { id: 8, title: "Lifting and Moving Patients", duration: "45 min", completed: false },
      { id: 9, title: "The Team Approach to Healthcare", duration: "15 min", completed: false }
    ]
  },
  {
    id: 3,
    title: "Patient Assessment",
    description: "Systematic patient evaluation and documentation",
    color: "purple",
    icon: Stethoscope,
    chapters: [
      { id: 10, title: "Patient Assessment", duration: "50 min", completed: false }
    ]
  },
  {
    id: 4,
    title: "Airway Management",
    description: "Airway assessment and intervention techniques",
    color: "red",
    icon: Activity,
    chapters: [
      { id: 11, title: "Airway Management", duration: "55 min", completed: false }
    ]
  },
  {
    id: 5,
    title: "Pharmacology",
    description: "EMT-B medication administration principles",
    color: "indigo",
    icon: HelpCircle,
    chapters: [
      { id: 12, title: "Principles of Pharmacology", duration: "40 min", completed: false }
    ]
  },
  {
    id: 6,
    title: "Shock & BLS",
    description: "Shock recognition and basic life support",
    color: "yellow",
    icon: Zap,
    chapters: [
      { id: 13, title: "Shock", duration: "35 min", completed: false },
      { id: 14, title: "BLS Resuscitation", duration: "50 min", completed: false }
    ]
  },
  {
    id: 7,
    title: "Medical Emergencies I",
    description: "Respiratory and cardiovascular emergencies",
    color: "pink",
    icon: Heart,
    chapters: [
      { id: 15, title: "Medical Overview", duration: "30 min", completed: false },
      { id: 16, title: "Respiratory Emergencies", duration: "45 min", completed: false },
      { id: 17, title: "Cardiovascular Emergencies", duration: "50 min", completed: false }
    ]
  },
  {
    id: 8,
    title: "Medical Emergencies II",
    description: "Neurologic and systemic emergencies",
    color: "cyan",
    icon: Brain,
    chapters: [
      { id: 18, title: "Neurologic Emergencies", duration: "40 min", completed: false },
      { id: 19, title: "Gastrointestinal and Urologic Emergencies", duration: "35 min", completed: false },
      { id: 20, title: "Endocrine and Hematologic Emergencies", duration: "40 min", completed: false }
    ]
  },
  {
    id: 9,
    title: "Medical Emergencies III",
    description: "Allergic reactions and toxicological emergencies",
    color: "orange",
    icon: AlertTriangle,
    chapters: [
      { id: 21, title: "Allergy and Anaphylaxis", duration: "30 min", completed: false },
      { id: 22, title: "Toxicology", duration: "40 min", completed: false },
      { id: 23, title: "Behavioral Health Emergencies", duration: "35 min", completed: false },
      { id: 24, title: "Gynecologic Emergencies", duration: "25 min", completed: false }
    ]
  },
  {
    id: 10,
    title: "Trauma I",
    description: "Basic trauma assessment and hemorrhage control",
    color: "red",
    icon: Shield,
    chapters: [
      { id: 25, title: "Trauma Overview", duration: "40 min", completed: false },
      { id: 26, title: "Bleeding", duration: "35 min", completed: false },
      { id: 27, title: "Soft Tissue Injuries", duration: "45 min", completed: false }
    ]
  },
  {
    id: 11,
    title: "Trauma II",
    description: "Head, neck, and chest trauma management",
    color: "emerald",
    icon: Eye,
    chapters: [
      { id: 28, title: "Face and Neck Injuries", duration: "35 min", completed: false },
      { id: 29, title: "Head and Spine Injuries", duration: "50 min", completed: false },
      { id: 30, title: "Chest Injuries", duration: "40 min", completed: false }
    ]
  },
  {
    id: 12,
    title: "Trauma III",
    description: "Abdominal, orthopedic, and environmental trauma",
    color: "violet",
    icon: Wrench,
    chapters: [
      { id: 31, title: "Introduction to Abdominal and Genitourinary Injuries", duration: "35 min", completed: false },
      { id: 32, title: "Orthopaedic Injuries", duration: "45 min", completed: false },
      { id: 33, title: "Environmental Emergencies", duration: "40 min", completed: false }
    ]
  },
  {
    id: 13,
    title: "Special Populations",
    description: "Pediatric, geriatric, and special needs patients",
    color: "rose",
    icon: Baby,
    chapters: [
      { id: 34, title: "Obstetrics and Neonatal Care", duration: "45 min", completed: false },
      { id: 35, title: "Pediatric Emergencies", duration: "50 min", completed: false },
      { id: 36, title: "Geriatric Emergencies", duration: "40 min", completed: false },
      { id: 37, title: "Patients with Special Challenges", duration: "30 min", completed: false }
    ]
  },
  {
    id: 14,
    title: "Operations",
    description: "EMS operations and incident management",
    color: "slate",
    icon: Truck,
    chapters: [
      { id: 38, title: "Transport Operations", duration: "35 min", completed: false },
      { id: 39, title: "Vehicle Extrication and Special Rescue", duration: "40 min", completed: false },
      { id: 40, title: "Incident Management", duration: "35 min", completed: false },
      { id: 41, title: "Terrorism and Disaster Management", duration: "40 min", completed: false }
    ]
  }
];

// Complete Chapter 1 Content - Fully Integrated
const chapter1Content = `# Chapter 1: EMS Systems

## Introduction to Emergency Medical Services (EMS)

EMS is an exciting field to join as an Emergency Medical Technician (EMT). EMS is a team of healthcare workers who provide emergency care and transportation to people who are sick or hurt. The kindness, skill, and professional attitude of an EMT can greatly help every patient.

## Levels of EMS Practice and Education Standards

The National Emergency Medical Service Scope of Practice Model describes four levels of EMS practice. The National Emergency Medical Service Education Standards explain the knowledge and skills taught at each of these four levels. This training provides everything needed to become a good entry-level EMT.

**Education must continue throughout an EMS career** to improve knowledge, skills, and to adapt to changes in healthcare.

## Certification and Licensure for EMS Providers

**Certification** checks if a provider has the necessary knowledge and skills for safe emergency care. Exams often include multiple-choice questions, skill tests, and pretend emergency calls. These exams are run by a state or military group, or by the **National Registry of Emergency Medical Technicians (NREMT)**.

The NREMT is a non-profit group that checks the knowledge and skills needed for good EMS practice. Most states require NREMT Certification to get a license to practice. Every five years, the NREMT surveys EMS providers to understand current real-world practices. In 2019, they also used data from the National Emergency Medical Service Information System to see actual types of calls and treatments. This helps them decide what EMTs need to know to give safe and effective care. The NREMT uses this information to create test plans for certification exams.

After passing certification, a provider can usually get **licensure**, which is the legal right to practice in their state. Getting a license does not mean an EMT can practice without limits.

## Credentialing and Scope of Practice

**Credentialing** is checking a healthcare provider's qualifications. This process can happen locally or regionally and is usually managed by a **physician Medical Director**. Sometimes, EMTs are given special permission to do fewer or more medical tasks, or to work in certain healthcare systems.

## Four Licensure Levels in Emergency Medical Care

Most states categorize emergency medical care workers into four main levels:

**Emergency Medical Responder (EMR)**: Has basic training to manage emergency scenes and provide immediate life-saving care before an ambulance arrives.

**Emergency Medical Technician (EMT)**: Has more training in basic emergency care and transport of sick and injured patients. They focus on stabilizing the scene and providing basic emergency care. EMTs are the main link between the emergency scene and the healthcare system.

**Advanced Emergency Medical Technician (AEMT)**: Has extra training beyond the EMT level, including advanced life support like IVs, advanced airway management, and giving certain medicines.

**Paramedic**: Has the most education and training among emergency care providers. Their training focuses on advanced life support, like reading heart rhythms, advanced airway management, and emergency medications. Paramedics work with other EMS providers under medical direction to help extend healthcare services.

## State and National Guidelines for Pre-hospital Care

Rules for pre-hospital emergency care are set by each state's laws, often managed by a State Office of EMS. Most state training and license rules meet or go beyond the guidelines from the National Highway Traffic Safety Administration (NHTSA) EMS Education Standards.

This textbook covers practices and skills from the NHTSA National EMS Education Standards and the 2019 NHTSA National EMS Scope of Practice Model. The goal is to apply this knowledge to be an effective emergency responder.

## Effective Learning Strategies for EMT Students

**It is crucial to read assigned materials before each class**. Just attending class is not enough to prepare you. Classes build on previous information, so reading helps understand later lessons. Your instructor will review readings, answer questions, and explain confusing points. **Take notes before class** to get the most out of discussions.

EMT programs include various learning activities:
- Case Presentations
- Question and Answer Sessions
- Small Group Debates and Discussions
- Hands-on Skills Practice with Feedback
- Patient Care Scenarios and Simulations
- Clinical Experience in real EMS and hospital care

These activities help you apply information, not just memorize it.

## Key Areas of EMT Training Focus

EMT training covers several main subjects:

**Scene Size-Up**: Understanding the situation, checking for safety threats, deciding if it's safe to go forward, if more help is needed, and the first steps to handle the emergency.

**Patient Assessment**: Using knowledge of the body and diseases to figure out what is wrong with the patient and find life-threatening issues.

**Treatment**: Identifying patient care needs and prioritizing them, like helping with breathing, stopping bleeding, or assisting childbirth. EMTs also learn to help patients in emotional distress.

**Transport**: Learning how to move patients with different illnesses and injuries to a hospital, clinic, or other medical facility.

## EMS as a Career and Licensure Requirements

Most people become EMTs to help others. It is important to **learn how to take care of yourself** to have a long, healthy career in EMS.

General requirements to be licensed as an EMT include:
- A high school diploma or equivalent
- Proof of immunizations against certain diseases
- Passing a background check and drug screening
- A valid driver's license
- Completing a recognized basic life support or CPR course
- Completing a state-approved EMT course
- Passing state-recognized written and practical certification exams (often NREMT)
- Following other state, local, and employer rules

The **Americans with Disabilities Act of 1990 (ADA)** protects people with disabilities from being denied access to state or local government programs and services, and requires employers to offer equal employment. Employers must make changes to consider disabled candidates and modify work environments if possible, allowing EMTs with disabilities to work if they can perform job skills with reasonable help.

States have rules preventing people with certain legal issues (like misdemeanors or felonies) from becoming EMS providers.

## History and Evolution of EMS Systems

EMS has a long history of people helping others. Early care included volunteer ambulances in World War I and military corpsmen in World War II. The Korean War saw field medics and helicopter evacuations to Mobile Army Surgical Hospital units. Advances in trauma care came from the Korean and Vietnam Wars.

In the 1960s, emergency ambulance services varied widely; some were good, while others used funeral home hearses or police station wagons. Many places had no formal pre-hospital care, and patients were often taken to the hospital by family or neighbors.

Modern EMS started in **1966 with the report "Accidental Death and Disability, the neglected disease of modern society,"** which showed major problems in pre-hospital care. This led to federal agencies like the NHTSA and the Department of Health, Education, and Welfare (now Health and Human Services) creating laws and funding for better EMS systems.

The **Department of Transportation (DOT)** developed the first EMT training curriculum in the early 1970s. The first EMT textbook, **"Emergency Care and Transportation of the Sick and Injured,"** was published in 1971. Throughout the 1970s, states created laws and EMS expanded, and emergency medicine became a recognized medical specialty.

In the 1980s, advanced EMTs were added to provide more advanced life support. As EMS grew, the definitions of providers began to differ between states, causing inconsistencies. In the 1990s, the NHTSA created the **Emergency Medical Service Agenda for the Future** to standardize EMS education and providers for more consistent care nationwide. In 2019, this document was revised and published as **Emergency Medical Service Agenda 2050**.

## Components of the EMS System: Oversight and Guidelines

At the federal level, the NHTSA creates the **National EMS Scope of Practice Model**, which sets minimum skill guidelines for each EMS provider level. States then pass laws to regulate how EMS providers operate, enforced by state EMS administrative offices.

Local **Medical Directors** oversee and support EMS personnel. They have input on daily operations, like medications carried or where patients are transported. **A Medical Director can limit an EMT's Scope of Practice, but cannot expand it beyond state law**. Expanding scope requires state approval.

## Public Basic Life Support and Immediate Aid

Many untrained people are now trained in Basic Life Support (BLS) or CPR. They also take first aid courses, like "Stop the Bleed," to provide immediate care before EMTs arrive.

A big development is the rise of **Automated External Defibrillators (AEDs)** in public places for use by anyone. These devices can detect and treat life-threatening heart rhythms.

EMTs often meet people at scenes who want to help, including trained first-aiders, doctors, nurses, or others. These people can be helpful, but sometimes they can interfere or create problems. It's an EMT's job to identify these people during scene size-up and manage their assistance.

## Training Hours and Responsibilities for Each EMS Level

EMS courses are **competency-based**, meaning they teach students to apply knowledge and skills to meet minimum performance standards. Training hours vary by state and program:

**Emergency Medical Responder (EMR)**:
- Estimated 50 to 80 hours of training
- Focuses on immediate care with limited equipment before an ambulance arrives
- Assists EMTs upon their arrival

**Emergency Medical Technician (EMT)**:
- Estimated 150 to 200 hours of training
- Assumes responsibility for patient assessment, care, packaging, and transport to the emergency department

**Advanced Emergency Medical Technician (AEMT)**:
- Ranges between 200 and 400 hours
- Adds advanced life support skills like IVs, advanced airway tools, and giving some medications
- Helps fill gaps in areas where Paramedics are limited

**Paramedic**:
- Extensive course ranging from 1,000 to over 2,000 hours, including classroom and internships
- Training is increasingly offered as part of associate's or bachelor's degree programs

## Vision and Guiding Principles of EMS Agenda 2050

EMS Agenda 2050 is a national review to create a more **unified and consistent EMS system**. Its vision is a **"people-centered" EMS system** where patients receive high-quality care comfortably and conveniently, based on research. This system focuses on reducing suffering, not just life-saving interventions.

It aims for EMS to be integrated into the larger healthcare system, focusing on preventing injuries and illnesses. **Key guiding principles** include a system that is:

- **Safe and Effective**: Designed to prevent injury, infection, illness, and stress
- **Integrated and Seamless**: Fully connected with other healthcare and emergency services
- **Reliable and Prepared**: Consistently provides compassionate care guided by research
- **Socially Equitable**: Care access and quality are not based on age, wealth, gender, ethnicity, or location
- **Sustainable and Efficient**: Fiscally responsible, provides value, minimizes waste, and maximizes accountability
- **Adaptable and Innovative**: Evolves to meet changing needs by evaluating new tools, techniques, and education

## Public Access to Emergency Services

Easy access to help is vital, usually by dialing **911** in most places. At the **Public Safety Access Point (PSAP)**, trained dispatchers gather information, send out emergency units, and give callers instructions. Enhanced 911 systems show the caller's address. Some centers have special equipment for people with speech or hearing disabilities to communicate via text.

**Mobile apps** are now used to alert trained CPR providers about cardiac arrests nearby and show AED locations. **Emergency Medical Dispatch** helps dispatchers give callers important instructions until EMS arrives.

Dispatchers relay all relevant information to responding crews, but cannot see the scene directly, so the reality may differ from dispatch info. Based on caller information, the dispatcher activates the right parts of the emergency system.

Over half of EMS support comes from government groups (fire agencies, other government agencies). Private services provide about a quarter. Other types include hospital-based and Native American tribal services.

## Human Resources in EMS

This part of EMS deals with the people who provide care. One goal of EMS Agenda 2050 is to make EMS a rewarding career for talented people. Efforts are being made to help EMS providers move between states more easily.

The National EMS Scope of Practice Model helps create consistent definitions for each EMS provider level. **National Registry Certification often helps with getting a license in other states**. The Interstate Commission for EMS Personnel Practice allows providers from member states to work short-term or sometimes in other member states under specific rules.

## Medical Direction and Control in EMS

Every EMS system has a **physician Medical Director** who allows EMTs to provide medical care in the field. The Medical Director sets the appropriate care for injuries and illnesses, described in **written standing orders and protocols**.

**Standing orders** are part of protocols that tell EMTs what to do for specific complaints without needing to ask for permission. The Medical Director is the link between the medical community, hospitals, and EMS workers. They approve continuing education and training for EMTs.

**Medical control** can be **offline (indirect)** or **online (direct)**:

**Online medical control** means direction given over phone or radio directly from the Medical Director or a designated physician (like a hospital doctor). This physician may confirm or change treatment plans.

**Offline medical control** includes standing orders, training, and supervision authorized by the Medical Director.

EMTs must follow the protocols their Medical Director sets.

## Legislation, Regulation, and System Integration

State laws and regulations govern EMS training, protocols, and practices. **The state EMS office** approves and regulates all EMS training centers, courses, instructors, and providers. This office often gets advice from a committee of EMS representatives, Medical Directors, and others.

Locally, each EMS system works in a specific area, providing pre-hospital care and transport. Most services have written rules and policies that EMTs are expected to follow.

**Integration of health services** means that the care given before the hospital (pre-hospital care) is connected with the care given at the hospital. When an EMT brings a patient to the emergency department, they are handing them over to another care provider. This connection helps reduce errors, increase efficiency, and ensures patients get continuous, coordinated care.

Some EMS systems work with hospitals to improve results for time-sensitive conditions like heart attacks and strokes. For example, Paramedics alert the hospital about a heart attack, and the hospital team gets ready.

## Mobile Integrated Healthcare and Community Paramedicine

**Mobile Integrated Healthcare (MIH)** is a way to deliver healthcare in the community, aiming for better access and lower costs. In MIH, healthcare is provided outside of a doctor's office or hospital by a team of professionals, including EMS providers, who connect patients with other resources like social services.

This model helps people in communities with few medical resources, or those who are homebound or disabled. **Community Paramedicine** is a growing field where experienced Paramedics get extra training to provide services in the community.

These services can go beyond typical patient care, including health check-ups, monitoring long-term illnesses, taking lab samples, giving shots, and advocating for patients.

## Information Systems and Evaluation in EMS

Information systems help EMS providers efficiently record the care they give. This electronic information can be used to improve care by answering questions like how many chest pain patients a department sees or the average time spent at trauma scenes.

Information is used for many purposes:
- Creating educational sessions for departments
- Justifying hiring more staff
- Guiding purchases of new equipment and continuing education
- Combining with hospital data to see patient outcomes

Data from the National Emergency Medical Service Information System (NEMSIS) helps plan for current and future EMS needs.

**Evaluation** ensures high-quality care is provided:
- The state EMS office and Licensing Bureau ensure only qualified providers are licensed
- The Medical Director maintains quality control
- Chief officers and supervisors ensure quality care under their watch
- Each EMS provider is responsible for their own high-quality care

A **"just culture"** promotes learning and accountability instead of shame and blame for errors. Agencies identify risks and design systems for safety, building trust and encouraging error reporting.

**Continuous Quality Improvement (CQI)** is a process where team members ask how they can do better. It's a proactive way to develop, use strengths, and fix challenges. CQI is important in high-consequence fields like EMS to prevent failures.

High reliability organizations have teamwork, a safety culture, and commitment to CQI. CQI uses information to improve performance and efficiency through a **Plan-Do-Study-Act (PDSA) cycle**:

- **Plan**: Gather and analyze information to get ideas for improvement
- **Do**: Put these ideas into action
- **Study**: Evaluate the changes that resulted
- **Act**: If positive, a larger part of the EMS system adopts the change

CQI is about learning and improving, not just punishing problems.

## Patient Safety and Error Reduction

Evaluation also helps find ways to reduce human error and improve patient safety. Errors can happen at any point during a call and can harm patients, the public, and EMTs. Errors are not always unavoidable; understanding them can help reduce or stop them.

Errors can come from three sources:
- **Rules-based failure**: Not following rules or protocols (e.g., giving medication without permission)
- **Knowledge-based failure**: Not knowing important information (e.g., giving the wrong medication due to lack of knowledge)
- **Skills-based failure**: Equipment not working or being used correctly

Attitudes and biases can also lead to errors. Both the EMS agency and personnel must work to reduce errors. Agencies need clear protocols that all EMTs understand. The environment can cause errors; agencies should work to limit distractions, improve lighting, and organize equipment. Solutions can be simple, like ensuring flashlights are available.

**EMTs can help reduce errors** by:
- Protecting the patient from harm and giving high-quality care; **being a patient advocate**
- Asking "why am I doing this?" before performing a skill to encourage reflection
- Asking for help from partners, medical control, or supervisors if unsure
- Using **checklists and reference sheets** to avoid missing steps or information, especially when busy
- Discussing troublesome calls with partners or supervisors for learning. These discussions can lead to changes in protocols or equipment

## EMS System Finance and Provider Involvement

All EMS departments need a way to get money to keep providing care. Funding can come from taxes, fees, subscriptions, donations, grants, and fundraisers.

**EMTs affect the financial side** through proper documentation. This helps agencies with insurance claims, getting grants, and proving good practices. EMTs may need to collect insurance information, get signatures on documents like HIPAA notices, or get permission to bill insurance. These steps are vital for the EMS organization to stay open.

Healthcare billing is changing; for example, the **Emergency Triage, Treat, and Transport (ET3)** pilot program in 2020 aims to pay EMS for providing the right care at the right time, not just for transport to an emergency department. ET3 allows payments for transport to other places like urgent care centers or for treatment at the scene without transport.

## Education Systems and Continuing Learning

EMT education is led by experienced EMS educators. Most state EMS offices approve and license instructors. Paramedic programs, and future AEMT programs, must meet national standards from the Commission on Accreditation of Allied Health Education Programs (CAAHEP).

**EMTs must take responsibility for their own learning** after initial training. **Continuing education (CE)** hours are required yearly to maintain and update knowledge and skills. CE can be provided by training officers, Medical Directors, local programs, or state and national conferences. It's important to ensure CE is approved for the EMT level.

**Commitment to continuous learning** is key to being a good EMT. Skills weaken if not used regularly, like CPR. Frequent CE, refresher courses, simulations, and self-education help maintain skills and knowledge.

## Prevention and Public Education in EMS

Prevention and public education are closely linked in EMS, focusing on public health. **Public health** looks at the health needs of whole populations to prevent health problems. Healthcare in the U.S. is expensive and does not always lead to longer lives compared to other countries. The goal of public health is **prevention**.

An example of public health success is adding iodine to salt to prevent goiter. EMS works with public health on **primary** and **secondary prevention**:

**Primary prevention** aims to stop an event from happening (e.g., vaccinations preventing polio, community programs on pool safety, car seat installation, or fall prevention for older adults). EMTs can teach first aid and CPR.

**Secondary prevention** aims to lessen the effects of an event that has already happened (e.g., helmets and seat belts preventing serious injuries in accidents). Changes in guardrail construction are another example.

EMTs also help with **surveillance of illnesses and injuries** by gathering data from calls. This data helps local governments improve dangerous intersections or prevent crashes. EMTs can educate the public professionally and respectfully about preventing injuries, like bike helmet use or stopping serious bleeding.

**Public education increases respect for EMS** as a vital part of healthcare, which can lead to more funding and recognition.

## EMS Research and Evidence-Based Medicine

Research and the **scientific method** help decide how EMS operates (e.g., how many ambulances are needed, whether to stabilize on scene or transport quickly). Early EMS relied on expert opinion, but modern healthcare uses **evidence-based medicine**.

Evidence-based medicine focuses on procedures proven to improve patient outcomes. Many EMS systems use the National Model EMS Clinical Guidelines, based on research and expert agreement. EMTs are involved in research by gathering data from every call. They may also participate in specific research projects, like studying oxygen levels for patients with shortness of breath.

This gathered information helps change patient care practices. Organizations like the International Liaison Committee on Resuscitation (ILCOR) and the American Heart Association (AHA) regularly update guidelines based on new medical evidence.

## Roles, Responsibilities, and Professional Attributes of an EMT

As the first healthcare professional on scene, EMTs have important roles and responsibilities. The main rule for EMS staff is to **always act in the patient's best interest**, which means being a **patient advocate**.

Patient outcomes often depend on the care provided in the field and quickly identifying patients needing transport. EMTs are responsible for everything from equipment preparation to delivering care and being a good example in the community.

**Professional attributes** include:
- Prioritizing patient care without risking self or others
- Maintaining a **professional appearance and manner** at all times
- Having an attitude that shows knowledge and dedication to serving those injured or ill
- Building confidence and easing patient anxiety through professionalism
- Performing under pressure with **composure**
- Treating patients and families with **understanding, respect, and compassion**
- Being **non-judgmental** even if patients are uncooperative, demanding, or abusive, understanding that people react poorly when under stress, hurt, or influenced by substances. Every patient deserves compassion and the best care
- Understanding that some patients call EMS for non-emergencies because it's their only way to get medical care
- Not being influenced by unprofessional attitudes of experienced but uncaring providers
- Upholding **patient confidentiality** (HIPAA); not discussing patient information with anyone except those treating the patient, or as legally required (e.g., police). Avoid gossiping about calls or patients`;

// Complete EMT-B Medications Database
const medicationsDatabase = [
  {
    id: 1,
    name: "Oxygen",
    category: "respiratory",
    classification: "Medical Gas",
    mechanism: "Increases oxygen content in blood and tissues, improves cellular respiration",
    indications: ["Hypoxemia (SpO2 < 94%)", "Respiratory distress", "Chest pain", "Altered mental status", "Shock", "Carbon monoxide poisoning"],
    contraindications: ["None in emergency situations", "Relative: COPD patients (use caution)"],
    dosing: "15L/min via non-rebreather mask or titrate to SpO2 94-99%",
    routes: ["Inhalation via mask, nasal cannula, or ventilation device"],
    sideEffects: ["Oxygen toxicity (rare in EMS)", "Drying of respiratory tract", "Fire hazard"],
    monitoring: ["SpO2 continuous", "Respiratory rate and effort", "Mental status", "Skin color"],
    precautions: ["Fire hazard - no smoking", "Secure tanks properly", "Check flow rates"],
    clinicalPearls: ["Oxygen is a drug - use appropriate concentration", "High-flow O2 for most emergencies", "Monitor COPD patients carefully"]
  },
  {
    id: 2,
    name: "Epinephrine",
    category: "cardiac",
    classification: "Sympathomimetic, Vasopressor",
    mechanism: "Alpha and beta adrenergic agonist, increases heart rate, contractility, and blood pressure",
    indications: ["Anaphylaxis", "Severe asthma with impending respiratory failure", "Cardiac arrest (ALS protocols)"],
    contraindications: ["None in life-threatening anaphylaxis", "Relative: severe hypertension, coronary artery disease"],
    dosing: "Adult: 0.3-0.5mg IM (1:1000) for anaphylaxis; Pediatric: 0.01mg/kg IM (max 0.3mg)",
    routes: ["Intramuscular (vastus lateralis preferred)", "Auto-injector (EpiPen)"],
    sideEffects: ["Tachycardia", "Hypertension", "Anxiety", "Tremors", "Headache", "Nausea"],
    monitoring: ["Heart rate and rhythm", "Blood pressure", "Respiratory status", "Mental status"],
    precautions: ["Single dose only", "Monitor for improvement", "Prepare for transport"],
    clinicalPearls: ["First-line treatment for anaphylaxis", "Don't delay administration", "May repeat in 5-15 minutes if no improvement"]
  },
  {
    id: 3,
    name: "Albuterol",
    category: "respiratory",
    classification: "Beta-2 Adrenergic Agonist, Bronchodilator",
    mechanism: "Relaxes bronchial smooth muscle, reduces airway resistance",
    indications: ["Bronchospasm", "Asthma exacerbation", "COPD exacerbation", "Allergic reactions with wheezing"],
    contraindications: ["Known hypersensitivity", "Relative: tachycardia > 150 bpm"],
    dosing: "2.5mg in 3mL normal saline via nebulizer; may repeat once",
    routes: ["Inhalation via nebulizer", "MDI with spacer (8-10 puffs)"],
    sideEffects: ["Tachycardia", "Tremors", "Nervousness", "Headache", "Hypokalemia"],
    monitoring: ["Respiratory rate and effort", "Wheezing assessment", "Heart rate", "SpO2"],
    precautions: ["Monitor heart rate", "Assess for improvement", "Consider repeat dose"],
    clinicalPearls: ["Onset 5-15 minutes", "Peak effect 30-60 minutes", "Combine with O2 therapy"]
  },
  {
    id: 4,
    name: "Aspirin",
    category: "cardiac",
    classification: "Antiplatelet Agent, Analgesic",
    mechanism: "Irreversibly inhibits cyclooxygenase, prevents platelet aggregation",
    indications: ["Acute coronary syndrome", "Chest pain of cardiac origin", "Suspected MI"],
    contraindications: ["Allergy to aspirin", "Active GI bleeding", "Severe asthma", "Children under 16 (Reye's syndrome)"],
    dosing: "162-325mg PO (chewable preferred), chewed and swallowed",
    routes: ["Oral (chewable tablets preferred)"],
    sideEffects: ["GI irritation", "Bleeding", "Tinnitus", "Allergic reactions"],
    monitoring: ["Pain level", "Signs of bleeding", "Allergic reactions", "Vital signs"],
    precautions: ["Give with medical direction", "Ensure patient can swallow", "Document time given"],
    clinicalPearls: ["Chewing increases absorption", "Baby aspirin = 81mg, regular = 325mg", "Early administration improves outcomes"]
  },
  {
    id: 5,
    name: "Nitroglycerin",
    category: "cardiac",
    classification: "Vasodilator, Antianginal",
    mechanism: "Venous and arterial vasodilation, reduces preload and afterload",
    indications: ["Chest pain of cardiac origin", "Acute coronary syndrome", "CHF (medical direction)"],
    contraindications: ["Systolic BP < 100 mmHg", "Recent phosphodiesterase inhibitor use", "Right heart MI", "Severe aortic stenosis"],
    dosing: "0.4mg SL tablet or spray; may repeat q5min x3 (total 1.2mg)",
    routes: ["Sublingual tablet", "Sublingual spray"],
    sideEffects: ["Hypotension", "Headache", "Dizziness", "Flushing", "Reflex tachycardia"],
    monitoring: ["Blood pressure (before each dose)", "Pain level", "Heart rate", "Mental status"],
    precautions: ["Check BP before each dose", "Patient must be sitting/lying", "Protect from light"],
    clinicalPearls: ["Onset 1-3 minutes", "Causes severe hypotension with ED drugs", "Fresh tablets cause burning sensation"]
  },
  {
    id: 6,
    name: "Activated Charcoal",
    category: "antidote",
    classification: "Antidote, Adsorbent",
    mechanism: "Binds toxins in GI tract, prevents absorption",
    indications: ["Oral poisoning/overdose (within 1 hour)", "Specific toxins as directed"],
    contraindications: ["Altered mental status", "Inability to swallow", "Caustic ingestion", "Hydrocarbon ingestion"],
    dosing: "Adult: 50-100g PO; Pediatric: 1-2g/kg PO (maximum 50g)",
    routes: ["Oral (mixed with water to form slurry)"],
    sideEffects: ["Nausea", "Vomiting", "Constipation", "Black stools", "Aspiration risk"],
    monitoring: ["Mental status", "Gag reflex", "Vomiting", "Respiratory status"],
    precautions: ["Only with intact gag reflex", "Risk of aspiration", "Single dose only"],
    clinicalPearls: ["Most effective within 1 hour", "Mix to milkshake consistency", "Not effective for all toxins"]
  },
  {
    id: 7,
    name: "Oral Glucose",
    category: "metabolic",
    classification: "Antihypoglycemic, Carbohydrate",
    mechanism: "Rapidly absorbed simple sugar, increases blood glucose",
    indications: ["Hypoglycemia with intact gag reflex", "Diabetic emergency with low glucose", "Altered mental status with known diabetes"],
    contraindications: ["Unconsciousness", "Inability to swallow", "Absent gag reflex"],
    dosing: "15-20g PO (1 tube glucose gel or 3-4 glucose tablets)",
    routes: ["Oral (gel, tablets, or liquid)"],
    sideEffects: ["Nausea", "Aspiration (if given inappropriately)"],
    monitoring: ["Mental status improvement", "Blood glucose (if available)", "Swallowing ability"],
    precautions: ["Ensure patient can swallow", "Position to prevent aspiration", "Monitor for improvement"],
    clinicalPearls: ["Effects seen in 10-20 minutes", "May repeat if no improvement", "Transport for definitive care"]
  },
  {
    id: 8,
    name: "Naloxone (Narcan)",
    category: "antidote",
    classification: "Opioid Antagonist",
    mechanism: "Competitive opioid receptor antagonist, reverses opioid effects",
    indications: ["Opioid overdose", "Respiratory depression from opioids", "Altered mental status with suspected opioid use"],
    contraindications: ["Known hypersensitivity (rare)"],
    dosing: "Adult: 0.4-2mg IV/IM/IN; Pediatric: 0.01mg/kg IV/IM/IN; Nasal spray: 4mg per nostril",
    routes: ["Intranasal (preferred)", "Intramuscular", "Intravenous"],
    sideEffects: ["Withdrawal symptoms", "Agitation", "Nausea/vomiting", "Hypertension", "Combativeness"],
    monitoring: ["Respiratory rate and effort", "Mental status", "Vital signs", "Return of symptoms"],
    precautions: ["Short duration (30-90 min)", "Patient may become combative", "Multiple doses may be needed"],
    clinicalPearls: ["Onset 2-5 minutes", "May precipitate withdrawal", "Transport all patients - effects wear off"]
  }
];

// Enhanced Clinical Tools
const clinicalTools = [
  {
    id: 'gcs',
    name: 'Glasgow Coma Scale',
    description: 'Assess level of consciousness',
    icon: Brain,
    color: 'blue',
    component: 'GlasgowComaScale'
  },
  {
    id: 'apgar',
    name: 'APGAR Score',
    description: 'Newborn assessment tool',
    icon: Heart,
    color: 'pink',
    component: 'APGARScore'
  },
  {
    id: 'rule-of-nines',
    name: 'Rule of Nines',
    description: 'Burn surface area calculator',
    icon: Target,
    color: 'orange',
    component: 'RuleOfNines'
  },
  {
    id: 'pediatric-vitals',
    name: 'Pediatric Vital Signs',
    description: 'Age-appropriate vital signs',
    icon: Users,
    color: 'green',
    component: 'PediatricVitals'
  },
  {
    id: 'trauma-score',
    name: 'Trauma Score',
    description: 'Initial trauma assessment',
    icon: AlertTriangle,
    color: 'red',
    component: 'TraumaScore'
  },
  {
    id: 'pain-scale',
    name: 'Pain Assessment',
    description: 'Pain rating scales',
    icon: Thermometer,
    color: 'purple',
    component: 'PainScale'
  }
];

// Main App Component
function App() {
  const [progress, setProgress] = useState({
    modulesCompleted: 2,
    totalModules: 14,
    chaptersCompleted: 8,
    totalChapters: 41,
    quizAverage: 87,
    studyTime: 24,
    streak: 7
  });

  return (
    <Router>
      <div className="min-h-screen bg-gray-50 font-roboto">
        <ProMedixHeader />
        <div className="max-w-7xl mx-auto">
          <Routes>
            <Route path="/" element={<Dashboard progress={progress} />} />
            <Route path="/modules" element={<StudyModulesPage />} />
            <Route path="/modules/:moduleId" element={<ModuleDetailPage />} />
            <Route path="/chapter/:chapterId" element={<ChapterPage />} />
            <Route path="/protocols" element={<ProtocolsPage />} />
            <Route path="/medications" element={<MedicationsPage />} />
            <Route path="/tools" element={<ClinicalToolsPage />} />
            <Route path="/tools/:toolId" element={<ToolPage />} />
            <Route path="/flashcards" element={<FlashcardsPage />} />
            <Route path="/quiz" element={<QuizPage />} />
            <Route path="/ai-assistant" element={<AIAssistantPage />} />
            <Route path="/progress" element={<ProgressPage progress={progress} />} />
            <Route path="/search" element={<SearchResultsPage />} />
            <Route path="/emtb" element={<EMTBNavigation />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
}

// Enhanced Header Component
const ProMedixHeader = () => {
  const location = useLocation();
  const [searchQuery, setSearchQuery] = useState('');
  const navigate = useNavigate();

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);
    }
  };

  const tabs = [
    { id: 'dashboard', label: 'Dashboard', path: '/', icon: Home },
    { id: 'modules', label: 'Study Modules', path: '/modules', icon: BookOpen },
    { id: 'emtb', label: 'EMT-B Training', path: '/emtb', icon: Stethoscope },
    { id: 'protocols', label: 'Protocols', path: '/protocols', icon: ClipboardList },
    { id: 'medications', label: 'Medications', path: '/medications', icon: Heart },
    { id: 'tools', label: 'Clinical Tools', path: '/tools', icon: Calculator },
    { id: 'quiz', label: 'Practice Quiz', path: '/quiz', icon: CheckSquare },
    { id: 'ai', label: 'AI Assistant', path: '/ai-assistant', icon: MessageCircle },
    { id: 'progress', label: 'Progress', path: '/progress', icon: BarChart3 }
  ];

  return (
    <header className="bg-white border-b border-gray-200 shadow-sm sticky top-0 z-50">
      {/* Top Bar with Logo and User Info */}
      <div className="border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            {/* ProMedix Logo */}
            <Link to="/" className="flex items-center space-x-3">
              <div className="relative">
                <svg width="48" height="48" viewBox="0 0 100 100" className="text-blue-600">
                  <rect x="35" y="10" width="30" height="80" rx="4" fill="currentColor" />
                  <rect x="10" y="35" width="80" height="30" rx="4" fill="currentColor" />
                  <path
                    d="M15 50 L25 50 L30 40 L35 60 L40 30 L45 70 L50 50 L85 50"
                    stroke="#60A5FA"
                    strokeWidth="3"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </div>
              <div>
                <h1 className="text-2xl font-bold">
                  <span className="text-blue-900">ProMedix</span>
                  <span className="text-blue-500">EMS</span>
                  <sup className="text-sm text-gray-500">™</sup>
                </h1>
                <div className="text-xs text-gray-500 -mt-1">EMT-B Education Platform</div>
              </div>
            </Link>

            {/* User Info and Actions */}
            <div className="flex items-center space-x-4">
              <button className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg">
                <Bell className="w-5 h-5" />
              </button>
              <button className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg">
                <User className="w-5 h-5" />
              </button>
              <div className="text-right">
                <div className="text-sm font-medium text-gray-900">EMT-B Student</div>
                <div className="text-xs text-gray-500">7-day streak 🔥</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Search Bar */}
      <div className="max-w-7xl mx-auto px-6 py-4">
        <form onSubmit={handleSearch} className="max-w-2xl mx-auto">
          <div className="relative">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search protocols, medications, conditions, and study materials..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50"
            />
            <button
              type="submit"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 bg-blue-600 text-white px-4 py-1.5 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
            >
              Search
            </button>
          </div>
        </form>
      </div>

      {/* Navigation Tabs */}
      <div className="max-w-7xl mx-auto px-6">
        <nav className="flex space-x-1 overflow-x-auto">
          {tabs.map((tab) => {
            const isActive = location.pathname === tab.path ||
                           (tab.path !== '/' && location.pathname.startsWith(tab.path));
           
            return (
              <Link
                key={tab.id}
                to={tab.path}
                className={`flex items-center space-x-2 px-4 py-3 text-sm font-medium border-b-2 whitespace-nowrap transition-colors ${
                  isActive
                    ? 'text-blue-600 border-blue-600 bg-blue-50'
                    : 'text-gray-600 border-transparent hover:text-gray-900 hover:border-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span>{tab.label}</span>
              </Link>
            );
          })}
        </nav>
      </div>
    </header>
  );
};

// Enhanced Dashboard Component
const Dashboard = ({ progress }) => {
  return (
    <main className="p-6">
      {/* Welcome Section */}
      <div className="bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 rounded-xl p-8 text-white mb-8">
        <h2 className="text-3xl font-bold mb-3">Master EMT-B Skills with ProMedix EMS™</h2>
        <p className="text-xl mb-6 text-blue-100">Enhance EMT-B Mastery with AI-Powered Clinical Reference Tools by ProMedix EMS™</p>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white/20 backdrop-blur-sm rounded-lg p-4 text-center">
            <div className="text-2xl font-bold">14</div>
            <div className="text-sm text-blue-200">Study Modules</div>
          </div>
          <div className="bg-white/20 backdrop-blur-sm rounded-lg p-4 text-center">
            <div className="text-2xl font-bold">41</div>
            <div className="text-sm text-blue-200">Chapters</div>
          </div>
          <div className="bg-white/20 backdrop-blur-sm rounded-lg p-4 text-center">
            <div className="text-2xl font-bold">AI</div>
            <div className="text-sm text-blue-200">Assistant</div>
          </div>
          <div className="bg-white/20 backdrop-blur-sm rounded-lg p-4 text-center">
            <div className="text-2xl font-bold">500+</div>
            <div className="text-sm text-blue-200">Questions</div>
          </div>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <StatCard icon={BookOpen} title="Modules Completed" value={`${progress.modulesCompleted}/${progress.totalModules}`} color="blue" />
        <StatCard icon={CheckCircle} title="Quiz Average" value={`${progress.quizAverage}%`} color="green" />
        <StatCard icon={Clock} title="Study Time" value={`${progress.studyTime}h`} color="purple" />
        <StatCard icon={Target} title="Streak" value={`${progress.streak} days`} color="orange" />
      </div>

      {/* Continue Learning & Quick Actions */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* Continue Learning */}
        <div className="lg:col-span-2 bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Continue Learning</h3>
          <div className="space-y-4">
            <div className="flex items-center space-x-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors cursor-pointer">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <span className="text-blue-600 font-bold">3</span>
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-gray-900">Medical, Legal, and Ethical Issues</h4>
                <p className="text-sm text-gray-500">Module 1 • Chapter 3 • 40 minutes remaining</p>
                <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                  <div className="bg-blue-500 h-2 rounded-full" style={{ width: '60%' }}></div>
                </div>
              </div>
              <Link to="/chapter/3" className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                Continue
              </Link>
            </div>
          </div>
        </div>

        {/* AI Assistant Quick Access */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
            <MessageCircle className="w-5 h-5 text-blue-600" />
            <span>AI Assistant</span>
          </h3>
          <div className="space-y-3">
            <p className="text-sm text-gray-600">Ask questions about EMT-B protocols, medications, or procedures</p>
            <Link to="/ai-assistant" className="block w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white text-center py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-colors font-medium">
              Start Conversation
            </Link>
            <div className="text-xs text-gray-500 text-center">
              Powered by ProMedix AI™
            </div>
          </div>
        </div>
      </div>

      {/* Study Modules Preview */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-gray-900">Study Modules</h3>
          <Link to="/modules" className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center space-x-1">
            <span>View All</span>
            <ChevronRight className="w-4 h-4" />
          </Link>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {moduleStructure.slice(0, 6).map((module) => (
            <ModuleCard key={module.id} module={module} />
          ))}
        </div>
      </div>

      {/* Quick Tools */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-6">Quick Clinical Tools</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {clinicalTools.map((tool) => (
            <Link
              key={tool.id}
              to={`/tools/${tool.id}`}
              className="flex flex-col items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <div className={`w-10 h-10 bg-${tool.color}-100 rounded-lg flex items-center justify-center mb-2`}>
                <tool.icon className={`w-5 h-5 text-${tool.color}-600`} />
              </div>
              <div className="text-xs font-medium text-center">{tool.name}</div>
            </Link>
          ))}
        </div>
      </div>
    </main>
  );
};

// Chapter Content Parser with EMT-B Scope Indicators
const parseContent = (content) => {
  const lines = content.split('\n');
  const elements = [];

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    if (line.startsWith('# ')) {
      elements.push({ type: 'h1', content: line.substring(2) });
    } else if (line.startsWith('## ')) {
      elements.push({ type: 'h2', content: line.substring(3) });
    } else if (line.startsWith('### ')) {
      elements.push({ type: 'h3', content: line.substring(4) });
    } else if (line.startsWith('#### ')) {
      elements.push({ type: 'h4', content: line.substring(5) });
    } else if (line.includes('**') && (line.includes('EMT') || line.includes('NREMT') || line.includes('Medical Director') || line.includes('911') || line.includes('AED'))) {
      elements.push({ type: 'emt-scope', content: line });
    } else if (line.includes('**Education must continue**') || line.includes('**always act in the patient\'s best interest**') || line.includes('**being a patient advocate**')) {
      elements.push({ type: 'critical', content: line });
    } else if (line.includes('**Plan-Do-Study-Act**') || line.includes('**Continuous Quality Improvement**') || line.includes('**evidence-based medicine**')) {
      elements.push({ type: 'info', content: line });
    } else if (line.startsWith('- **')) {
      elements.push({ type: 'important', content: line.substring(4) });
    } else if (line.startsWith('- ')) {
      elements.push({ type: 'bullet', content: line.substring(2) });
    } else if (line.includes('General requirements to be licensed') || line.includes('Training hours vary by state')) {
      elements.push({ type: 'requirements', content: line });
    } else if (line.includes('**') && line.length > 0) {
      elements.push({ type: 'highlight', content: line });
    } else if (line.includes('*This section will be') || line.includes('*Comprehensive content') || line.includes('*Detailed content')) {
      elements.push({ type: 'placeholder', content: line });
    } else if (line.length > 0) {
      elements.push({ type: 'paragraph', content: line });
    } else if (elements.length > 0 && elements[elements.length - 1].type !== 'break') {
      elements.push({ type: 'break' });
    }
  }

  return elements;
};

// Content Renderer with Professional Medical Styling
const renderContent = (element, index) => {
  const baseClass = "font-roboto leading-relaxed";
  
  switch (element.type) {
    case 'h1':
      return (
        <h1 key={index} className={`${baseClass} text-3xl font-bold text-slate-800 mb-6 pb-3 border-b-2 border-blue-500`}>
          {element.content}
        </h1>
      );
    case 'h2':
      return (
        <div key={index} className="mb-6">
          <h2 className={`${baseClass} text-2xl font-semibold text-slate-700 mb-4 flex items-center`}>
            <div className="w-1 h-6 bg-blue-500 mr-3"></div>
            {element.content}
          </h2>
        </div>
      );
    case 'h3':
      return (
        <h3 key={index} className={`${baseClass} text-xl font-semibold text-slate-700 mb-3 mt-6`}>
          {element.content}
        </h3>
      );
    case 'h4':
      return (
        <h4 key={index} className={`${baseClass} text-lg font-medium text-slate-600 mb-2 mt-4`}>
          {element.content}
        </h4>
      );
    case 'emt-scope':
      return (
        <div key={index} className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4 rounded-r-lg">
          <div className="flex items-start">
            <div className="bg-blue-100 text-blue-800 text-xs font-semibold px-2.5 py-0.5 rounded mr-3 mt-0.5 flex-shrink-0">
              EMT-B SCOPE
            </div>
            <p className={`${baseClass} text-blue-800`} dangerouslySetInnerHTML={{ __html: element.content }} />
          </div>
        </div>
      );
    case 'critical':
      return (
        <div key={index} className="bg-red-50 border-l-4 border-red-500 p-4 mb-4 rounded-r-lg">
          <div className="flex items-start">
            <AlertCircle className="w-5 h-5 text-red-500 mr-2 mt-0.5 flex-shrink-0" />
            <div>
              <div className="bg-red-100 text-red-800 text-xs font-semibold px-2.5 py-0.5 rounded mb-2 inline-block">
                CRITICAL
              </div>
              <p className={`${baseClass} text-red-800`} dangerouslySetInnerHTML={{ __html: element.content }} />
            </div>
          </div>
        </div>
      );
    case 'info':
      return (
        <div key={index} className="bg-green-50 border-l-4 border-green-500 p-4 mb-4 rounded-r-lg">
          <div className="flex items-start">
            <CheckCircle className="w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
            <div>
              <div className="bg-green-100 text-green-800 text-xs font-semibold px-2.5 py-0.5 rounded mb-2 inline-block">
                KEY CONCEPT
              </div>
              <p className={`${baseClass} text-green-800`} dangerouslySetInnerHTML={{ __html: element.content }} />
            </div>
          </div>
        </div>
      );
    case 'important':
      return (
        <div key={index} className="bg-amber-50 border-l-4 border-amber-500 p-4 mb-4 rounded-r-lg">
          <div className="flex items-start">
            <AlertTriangle className="w-5 h-5 text-amber-500 mr-2 mt-0.5 flex-shrink-0" />
            <p className={`${baseClass} text-amber-800 font-medium`} dangerouslySetInnerHTML={{ __html: element.content }} />
          </div>
        </div>
      );
    case 'requirements':
      return (
        <div key={index} className="bg-purple-50 border border-purple-200 p-4 mb-4 rounded-lg">
          <div className="flex items-start">
            <div className="bg-purple-100 text-purple-800 text-xs font-semibold px-2.5 py-0.5 rounded mr-3 mt-0.5 flex-shrink-0">
              REQUIREMENTS
            </div>
            <p className={`${baseClass} text-purple-800`} dangerouslySetInnerHTML={{ __html: element.content }} />
          </div>
        </div>
      );
    case 'placeholder':
      return (
        <div key={index} className="bg-slate-50 border border-slate-200 p-4 mb-4 rounded-lg">
          <p className={`${baseClass} text-slate-600 italic`} dangerouslySetInnerHTML={{ __html: element.content }} />
        </div>
      );
    case 'highlight':
      return (
        <p key={index} className={`${baseClass} text-slate-700 mb-4 leading-7 font-medium`} dangerouslySetInnerHTML={{ __html: element.content }} />
      );
    case 'bullet':
      return (
        <div key={index} className="flex items-start mb-2 ml-4">
          <div className="w-2 h-2 bg-blue-500 rounded-full mr-3 mt-2 flex-shrink-0"></div>
          <p className={`${baseClass} text-slate-700`} dangerouslySetInnerHTML={{ __html: element.content }} />
        </div>
      );
    case 'paragraph':
      return (
        <p key={index} className={`${baseClass} text-slate-700 mb-4 leading-7`} dangerouslySetInnerHTML={{ __html: element.content }} />
      );
    case 'break':
      return <div key={index} className="mb-4"></div>;
    default:
      return null;
  }
};

// Enhanced Medications Page
const MedicationsPage = () => {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedMedication, setSelectedMedication] = useState(null);

  const categories = [
    { id: 'all', name: 'All Medications', count: medicationsDatabase.length },
    { id: 'respiratory', name: 'Respiratory', count: medicationsDatabase.filter(m => m.category === 'respiratory').length },
    { id: 'cardiac', name: 'Cardiac', count: medicationsDatabase.filter(m => m.category === 'cardiac').length },
    { id: 'antidote', name: 'Antidotes', count: medicationsDatabase.filter(m => m.category === 'antidote').length },
    { id: 'metabolic', name: 'Metabolic', count: medicationsDatabase.filter(m => m.category === 'metabolic').length }
  ];

  const filteredMedications = medicationsDatabase.filter(med => {
    const matchesCategory = selectedCategory === 'all' || med.category === selectedCategory;
    const matchesSearch = med.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         med.indications.some(indication => indication.toLowerCase().includes(searchTerm.toLowerCase()));
    return matchesCategory && matchesSearch;
  });

  if (selectedMedication) {
    return (
      <main className="p-6">
        <div className="max-w-4xl mx-auto">
          <div className="mb-6">
            <button
              onClick={() => setSelectedMedication(null)}
              className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 mb-4"
            >
              <ChevronRight className="w-4 h-4 rotate-180" />
              <span>Back to Medications</span>
            </button>
            <h1 className="text-3xl font-bold text-gray-900">{selectedMedication.name}</h1>
            <p className="text-gray-600">{selectedMedication.classification}</p>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Left Column */}
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Mechanism of Action</h3>
                  <p className="text-gray-700">{selectedMedication.mechanism}</p>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Indications</h3>
                  <ul className="space-y-2">
                    {selectedMedication.indications.map((indication, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <CheckCircle className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                        <span className="text-gray-700">{indication}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Contraindications</h3>
                  <ul className="space-y-2">
                    {selectedMedication.contraindications.map((contraindication, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
                        <span className="text-gray-700">{contraindication}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              {/* Right Column */}
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Dosing</h3>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <p className="text-blue-800 font-medium">{selectedMedication.dosing}</p>
                  </div>
                  <div className="mt-2">
                    <h4 className="font-medium text-gray-700 mb-1">Routes:</h4>
                    <ul className="text-sm text-gray-600">
                      {selectedMedication.routes.map((route, index) => (
                        <li key={index}>• {route}</li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Side Effects</h3>
                  <ul className="space-y-1">
                    {selectedMedication.sideEffects.map((effect, index) => (
                      <li key={index} className="text-gray-700 text-sm">• {effect}</li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Monitoring</h3>
                  <ul className="space-y-1">
                    {selectedMedication.monitoring.map((monitor, index) => (
                      <li key={index} className="text-gray-700 text-sm">• {monitor}</li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Clinical Pearls</h3>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <ul className="space-y-2">
                      {selectedMedication.clinicalPearls.map((pearl, index) => (
                        <li key={index} className="text-yellow-800 text-sm flex items-start space-x-2">
                          <Star className="w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                          <span>{pearl}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">EMT-B Medications</h1>
        <p className="text-gray-600">Complete medication database for EMT-Basic scope of practice</p>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search medications..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="flex space-x-2 overflow-x-auto">
            {categories.map((category) => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap transition-colors ${
                  selectedCategory === category.id
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {category.name} ({category.count})
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Medications Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredMedications.map((medication) => (
          <div
            key={medication.id}
            onClick={() => setSelectedMedication(medication)}
            className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-lg transition-all cursor-pointer hover:scale-105"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-bold text-gray-900">{medication.name}</h3>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                medication.category === 'respiratory' ? 'bg-blue-100 text-blue-800' :
                medication.category === 'cardiac' ? 'bg-red-100 text-red-800' :
                medication.category === 'antidote' ? 'bg-purple-100 text-purple-800' :
                'bg-green-100 text-green-800'
              }`}>
                {medication.category}
              </span>
            </div>
            <p className="text-gray-600 text-sm mb-4">{medication.classification}</p>
            <div className="mb-4">
              <h4 className="font-semibold text-gray-700 text-sm mb-2">Primary Indications:</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                {medication.indications.slice(0, 3).map((indication, index) => (
                  <li key={index}>• {indication}</li>
                ))}
                {medication.indications.length > 3 && (
                  <li className="text-blue-600">+ {medication.indications.length - 3} more...</li>
                )}
              </ul>
            </div>
            <div className="text-right">
              <span className="text-blue-600 text-sm font-medium">View Details →</span>
            </div>
          </div>
        ))}
      </div>
    </main>
  );
};

// Glasgow Coma Scale Component
const GlasgowComaScale = () => {
  const [eyeResponse, setEyeResponse] = useState(0);
  const [verbalResponse, setVerbalResponse] = useState(0);
  const [motorResponse, setMotorResponse] = useState(0);

  const totalScore = eyeResponse + verbalResponse + motorResponse;

  const getScoreInterpretation = (score) => {
    if (score >= 13) return { level: "Mild TBI", color: "green", description: "Good prognosis" };
    if (score >= 9) return { level: "Moderate TBI", color: "yellow", description: "Moderate injury" };
    if (score >= 3) return { level: "Severe TBI", color: "red", description: "Poor prognosis" };
    return { level: "Invalid", color: "gray", description: "Check responses" };
  };

  const interpretation = getScoreInterpretation(totalScore);

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Glasgow Coma Scale</h2>
      
      <div className="space-y-6">
        {/* Eye Response */}
        <div>
          <h3 className="text-lg font-semibold text-gray-700 mb-3">Eye Response</h3>
          <div className="space-y-2">
            {[
              { value: 4, label: "Spontaneous opening" },
              { value: 3, label: "Opens to speech" },
              { value: 2, label: "Opens to pain" },
              { value: 1, label: "No response" }
            ].map((option) => (
              <button
                key={option.value}
                onClick={() => setEyeResponse(option.value)}
                className={`w-full text-left p-3 rounded-lg border-2 transition-colors ${
                  eyeResponse === option.value
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <span className="font-medium">{option.value}</span> - {option.label}
              </button>
            ))}
          </div>
        </div>

        {/* Verbal Response */}
        <div>
          <h3 className="text-lg font-semibold text-gray-700 mb-3">Verbal Response</h3>
          <div className="space-y-2">
            {[
              { value: 5, label: "Oriented and conversing" },
              { value: 4, label: "Disoriented and conversing" },
              { value: 3, label: "Inappropriate words" },
              { value: 2, label: "Incomprehensible sounds" },
              { value: 1, label: "No response" }
            ].map((option) => (
              <button
                key={option.value}
                onClick={() => setVerbalResponse(option.value)}
                className={`w-full text-left p-3 rounded-lg border-2 transition-colors ${
                  verbalResponse === option.value
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <span className="font-medium">{option.value}</span> - {option.label}
              </button>
            ))}
          </div>
        </div>

        {/* Motor Response */}
        <div>
          <h3 className="text-lg font-semibold text-gray-700 mb-3">Motor Response</h3>
          <div className="space-y-2">
            {[
              { value: 6, label: "Obeys commands" },
              { value: 5, label: "Localizes to pain" },
              { value: 4, label: "Normal flexion (withdrawal)" },
              { value: 3, label: "Abnormal flexion (decorticate)" },
              { value: 2, label: "Extension (decerebrate)" },
              { value: 1, label: "No response" }
            ].map((option) => (
              <button
                key={option.value}
                onClick={() => setMotorResponse(option.value)}
                className={`w-full text-left p-3 rounded-lg border-2 transition-colors ${
                  motorResponse === option.value
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <span className="font-medium">{option.value}</span> - {option.label}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Results */}
      {totalScore > 0 && (
        <div className="mt-8 p-6 bg-gray-50 rounded-lg">
          <div className="text-center">
            <div className="text-4xl font-bold text-gray-900 mb-2">{totalScore}/15</div>
            <div className={`text-lg font-semibold mb-2 ${
              interpretation.color === 'green' ? 'text-green-600' :
              interpretation.color === 'yellow' ? 'text-yellow-600' :
              interpretation.color === 'red' ? 'text-red-600' :
              'text-gray-600'
            }`}>
              {interpretation.level}
            </div>
            <div className="text-sm text-gray-600">{interpretation.description}</div>
          </div>
          <div className="mt-4 text-sm text-gray-500">
            Eye: {eyeResponse} + Verbal: {verbalResponse} + Motor: {motorResponse} = {totalScore}
          </div>
        </div>
      )}
    </div>
  );
};

// Enhanced Clinical Tools Page
const ClinicalToolsPage = () => {
  return (
    <main className="p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Clinical Assessment Tools</h1>
        <p className="text-gray-600">Essential EMT-B clinical assessment and calculation tools</p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {clinicalTools.map((tool) => (
          <Link key={tool.id} to={`/tools/${tool.id}`} className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-lg transition-all hover:scale-105">
            <div className="flex items-center space-x-4 mb-4">
              <div className={`w-12 h-12 bg-${tool.color}-100 rounded-lg flex items-center justify-center`}>
                <tool.icon className={`w-6 h-6 text-${tool.color}-600`} />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">{tool.name}</h3>
                <p className="text-sm text-gray-600">{tool.description}</p>
              </div>
            </div>
            <div className="text-right">
              <span className="text-blue-600 text-sm font-medium">Open Tool →</span>
            </div>
          </Link>
        ))}
      </div>
    </main>
  );
};

// Enhanced Tool Page
const ToolPage = () => {
  const { toolId } = useParams();
  const tool = clinicalTools.find(t => t.id === toolId);
  
  if (!tool) {
    return <div className="p-6">Tool not found</div>;
  }

  const renderTool = () => {
    switch (toolId) {
      case 'gcs':
        return <GlasgowComaScale />;
      default:
        return (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div className="text-center py-8">
              <tool.icon className={`w-16 h-16 text-${tool.color}-600 mx-auto mb-4`} />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">{tool.name}</h3>
              <p className="text-gray-600 mb-4">{tool.description}</p>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <p className="text-blue-700">Interactive {tool.name.toLowerCase()} tool ready for integration.</p>
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <main className="p-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <Link to="/tools" className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 mb-4">
            <ChevronRight className="w-4 h-4 rotate-180" />
            <span>Back to Clinical Tools</span>
          </Link>
          <h1 className="text-3xl font-bold text-gray-900">{tool.name}</h1>
          <p className="text-gray-600">{tool.description}</p>
        </div>
        {renderTool()}
      </div>
    </main>
  );
};

// Chapter Page with Full Content Integration
const ChapterPage = () => {
  const { chapterId } = useParams();
  const findChapter = () => {
    for (const module of moduleStructure) {
      const chapter = module.chapters.find(c => c.id === parseInt(chapterId || '0'));
      if (chapter) return { chapter, module };
    }
    return null;
  };
 
  const result = findChapter();
  if (!result) return <div>Chapter not found</div>;
 
  const { chapter, module } = result;
  
  // Get content - Chapter 1 has full content, others have placeholders
  const getChapterContent = () => {
    if (parseInt(chapterId) === 1) {
      return chapter1Content;
    }
    
    return `# Chapter ${chapter.id}: ${chapter.title}

## Learning Objectives
*Learning objectives for ${chapter.title} will be populated here with specific, measurable outcomes aligned with EMT-B scope of practice.*

## Overview
*Comprehensive content for ${chapter.title} will be integrated here following the same professional medical formatting as Chapter 1.*

**This chapter is currently being prepared with:**
- Professional medical formatting and typography
- EMT-B scope indicators and badges
- Critical alerts for patient safety information
- Interactive content elements and assessments
- Real-world scenarios and case studies

## Key Topics to be Covered
*Detailed content structure for ${chapter.title} will be added following AAOS curriculum standards.*

## Coming Soon
This chapter content will be integrated with the same professional medical formatting, EMT-B scope indicators, and interactive features as Chapter 1. Content will include comprehensive text, clinical scenarios, assessment tools, and multimedia elements.`;
  };

  const content = getChapterContent();
  const contentElements = parseContent(content);
 
  return (
    <main className="p-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <div className="mb-4">
            <Link to="/modules" className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 mb-2">
              <ChevronRight className="w-4 h-4 rotate-180" />
              <span>Back to Modules</span>
            </Link>
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Chapter {chapter.id}: {chapter.title}</h1>
          <p className="text-gray-600">Module {module.id}: {module.title} • {chapter.duration}</p>
        </div>
       
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
          <div className="max-w-none">
            {contentElements.map((element, index) => renderContent(element, index))}
          </div>
         
          <div className="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
            <div className="text-sm text-gray-500">
              Estimated time: {chapter.duration}
            </div>
            <div className="flex space-x-3">
              <button className="bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                📝 Take Notes
              </button>
              <button className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg text-sm font-medium transition-colors">
                Mark Complete
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
};

// Additional component definitions...
const ModuleCard = ({ module }) => {
  const completedChapters = module.chapters.filter(c => c.completed).length;
  const progressPercent = (completedChapters / module.chapters.length) * 100;
 
  return (
    <Link to={`/modules/${module.id}`} className="block">
      <div className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-all hover:scale-105">
        <div className="flex items-center justify-between mb-3">
          <span className="text-xs font-medium text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
            Module {module.id}
          </span>
          <span className="text-xs text-gray-500">{completedChapters}/{module.chapters.length}</span>
        </div>
        <h4 className="font-semibold text-gray-900 mb-2">{module.title}</h4>
        <p className="text-xs text-gray-500 mb-3">{module.description}</p>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className="bg-blue-500 h-2 rounded-full transition-all duration-500"
            style={{ width: `${progressPercent}%` }}
          ></div>
        </div>
      </div>
    </Link>
  );
};

const StatCard = ({ icon: Icon, title, value, color }) => {
  const colorClasses = {
    blue: 'bg-blue-50 text-blue-600',
    green: 'bg-green-50 text-green-600',
    purple: 'bg-purple-50 text-purple-600',
    orange: 'bg-orange-50 text-orange-600'
  };
 
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className="text-2xl font-bold text-gray-900 mt-1">{value}</p>
        </div>
        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorClasses[color]}`}>
          <Icon className="w-6 h-6" />
        </div>
      </div>
    </div>
  );
};

// Study Modules Page
const StudyModulesPage = () => (
  <main className="p-6">
    <div className="mb-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-2">Study Modules</h1>
      <p className="text-gray-600">Complete AAOS EMT-B curriculum • 14 modules • 41 chapters</p>
    </div>
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {moduleStructure.map((module) => (
        <div key={module.id} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center space-x-4 mb-4">
            <div className={`w-12 h-12 bg-${module.color}-100 rounded-lg flex items-center justify-center`}>
              <module.icon className={`w-6 h-6 text-${module.color}-600`} />
            </div>
            <div className="flex-1">
              <h3 className="text-xl font-bold text-gray-900">Module {module.id}: {module.title}</h3>
              <p className="text-gray-600">{module.description}</p>
            </div>
          </div>
          <div className="flex items-center justify-between mb-4">
            <div className="text-sm text-gray-500">{module.chapters.length} chapters</div>
            <div className="text-sm text-gray-500">
              {module.chapters.filter(c => c.completed).length}/{module.chapters.length} completed
            </div>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
            <div 
              className="bg-blue-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${(module.chapters.filter(c => c.completed).length / module.chapters.length) * 100}%` }}
            ></div>
          </div>
          <Link 
            to={`/modules/${module.id}`} 
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors inline-block"
          >
            View Module →
          </Link>
        </div>
      ))}
    </div>
  </main>
);

// Module Detail Page
const ModuleDetailPage = () => {
  const { moduleId } = useParams();
  const module = moduleStructure.find(m => m.id === parseInt(moduleId || '0'));
  if (!module) return <div>Module not found</div>;
 
  return (
    <main className="p-6">
      <div className="mb-8">
        <Link to="/modules" className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 mb-4">
          <ChevronRight className="w-4 h-4 rotate-180" />
          <span>Back to All Modules</span>
        </Link>
        <div className="flex items-center space-x-4 mb-4">
          <div className={`w-16 h-16 bg-${module.color}-100 rounded-xl flex items-center justify-center`}>
            <module.icon className={`w-8 h-8 text-${module.color}-600`} />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Module {module.id}: {module.title}</h1>
            <p className="text-gray-600">{module.description}</p>
          </div>
        </div>
        <div className="flex items-center space-x-6 text-sm text-gray-600">
          <span>{module.chapters.length} chapters</span>
          <span>{module.chapters.filter(c => c.completed).length} completed</span>
          <span>{module.chapters.reduce((total, ch) => total + parseInt(ch.duration), 0)} minutes total</span>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {module.chapters.map((chapter) => (
          <Link 
            key={chapter.id} 
            to={`/chapter/${chapter.id}`} 
            className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-all hover:scale-105"
          >
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-bold text-gray-900">Chapter {chapter.id}: {chapter.title}</h3>
              {chapter.completed && <CheckCircle className="w-5 h-5 text-green-500" />}
            </div>
            <div className="flex items-center justify-between text-sm text-gray-500">
              <span>{chapter.duration}</span>
              <span className={chapter.completed ? 'text-green-600 font-medium' : ''}>
                {chapter.completed ? 'Completed' : 'Not started'}
              </span>
            </div>
          </Link>
        ))}
      </div>
    </main>
  );
};

// Enhanced AI Assistant
const AIAssistantPage = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'assistant',
      content: `Hello! I'm your ProMedix EMS AI Assistant. I can help you with:

🚑 **EMT-B Protocols & Procedures**
💊 **Medication Information & Dosing**
🧠 **Clinical Assessment Tools**
📚 **Study Materials & Concepts**
🎯 **Practice Questions & Scenarios**

What would you like to learn about today?`
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const medicalResponses = {
    'aspirin': `**Aspirin (ASA) - EMT-B Quick Reference:**

**Mechanism:** Antiplatelet agent, prevents blood clot formation
**Indications:** Chest pain of cardiac origin, suspected MI
**Dose:** 162-325mg PO (chewable preferred)
**Contraindications:** Allergy, GI bleeding, severe asthma
**Key Point:** Chewing increases absorption rate

**Clinical Pearl:** Give early in suspected ACS for best outcomes`,
    
    'oxygen': `**Oxygen - EMT-B Administration:**

**Indications:** SpO2 < 94%, respiratory distress, chest pain
**Delivery:** 15L/min via non-rebreather mask
**Target:** SpO2 94-99% (avoid 100% in COPD)
**Monitoring:** Continuous pulse oximetry

**Remember:** Oxygen is a drug - use appropriate concentration!`,
    
    'gcs': `**Glasgow Coma Scale (GCS) Assessment:**

**Components:**
• **Eye Opening:** 4-1 points
• **Verbal Response:** 5-1 points  
• **Motor Response:** 6-1 points

**Interpretation:**
• 13-15: Mild TBI
• 9-12: Moderate TBI
• 3-8: Severe TBI

**EMT Tip:** Document initial and trending scores`,
    
    'shock': `**Shock Recognition & Management:**

**Early Signs:**
• Altered mental status
• Tachycardia
• Cool, clammy skin
• Delayed capillary refill

**EMT Treatment:**
• High-flow oxygen
• Position supine (legs elevated if no spinal injury)
• Keep warm
• Rapid transport
• Monitor vitals frequently`
  };

  const getAIResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    // Check for specific medical terms
    for (const [term, response] of Object.entries(medicalResponses)) {
      if (message.includes(term)) {
        return response;
      }
    }
    
    // General responses
    if (message.includes('medication') || message.includes('drug')) {
      return `I can help with EMT-B medications! We cover 8 essential drugs:

💨 **Respiratory:** Oxygen, Albuterol
❤️ **Cardiac:** Epinephrine, Aspirin, Nitroglycerin
🏥 **Antidotes:** Activated Charcoal, Naloxone
🍬 **Metabolic:** Oral Glucose

Which medication would you like to learn about?`;
    }
    
    if (message.includes('protocol') || message.includes('procedure')) {
      return `EMT-B protocols cover systematic approaches to patient care:

🔍 **Patient Assessment:** Primary/Secondary surveys
🫁 **Airway Management:** Positioning, suctioning, BVM
💓 **Cardiac Emergencies:** ACS, CHF, cardiac arrest
🧠 **Medical Emergencies:** Stroke, seizures, diabetes
🩸 **Trauma:** Bleeding control, spinal immobilization

What specific protocol interests you?`;
    }
    
    if (message.includes('study') || message.includes('learn')) {
      return `**Study Tips for EMT-B Success:**

📚 **Use Active Learning:** Practice scenarios, not just reading
🎯 **Focus on Priorities:** ABCs always come first
💡 **Clinical Thinking:** Ask "Why?" not just "What?"
🔄 **Spaced Repetition:** Review material regularly
👥 **Study Groups:** Discuss cases with classmates

Which topic would you like study guidance on?`;
    }
    
    return `I'm here to help with your EMT-B education! I can assist with:

• **Medications** and their uses
• **Assessment protocols** and procedures  
• **Clinical scenarios** and decision-making
• **Study strategies** and exam prep
• **Specific conditions** and treatments

Please ask me about any EMT-B topic, and I'll provide detailed, clinically accurate information!`;
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (inputValue.trim()) {
      const newUserMessage = { id: Date.now(), type: 'user', content: inputValue };
      setMessages(prev => [...prev, newUserMessage]);
      
      setIsTyping(true);
      
      // Simulate AI thinking time
      setTimeout(() => {
        const aiResponse = getAIResponse(inputValue);
        const newAIMessage = {
          id: Date.now() + 1,
          type: 'assistant',
          content: aiResponse
        };
        setMessages(prev => [...prev, newAIMessage]);
        setIsTyping(false);
      }, 1500);
      
      setInputValue('');
    }
  };

  return (
    <main className="p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 h-[600px] flex flex-col">
          
          {/* Header */}
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <MessageCircle className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <h2 className="text-xl font-bold text-gray-900">ProMedix EMS AI Assistant</h2>
                <p className="text-sm text-gray-600">Your intelligent EMT-B study companion</p>
              </div>
            </div>
          </div>
          
          {/* Messages */}
          <div className="flex-1 p-6 overflow-y-auto space-y-4">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg whitespace-pre-line ${
                  message.type === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-900'
                }`}>
                  {message.content}
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-gray-100 text-gray-900 px-4 py-3 rounded-lg">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{animationDelay: '0.2s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{animationDelay: '0.4s'}}></div>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {/* Quick Questions */}
          <div className="px-6 py-3 border-t border-gray-200 bg-gray-50">
            <div className="flex flex-wrap gap-2">
              {['Aspirin dosing', 'GCS calculation', 'Shock signs', 'Oxygen therapy'].map((question) => (
                <button
                  key={question}
                  onClick={() => setInputValue(question)}
                  className="text-xs bg-white border border-gray-300 rounded-full px-3 py-1 hover:bg-gray-100 transition-colors"
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
          
          {/* Input */}
          <div className="p-6 border-t border-gray-200">
            <form onSubmit={handleSendMessage} className="flex space-x-3">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Ask about protocols, medications, procedures..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isTyping}
              />
              <button
                type="submit"
                disabled={isTyping || !inputValue.trim()}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Send
              </button>
            </form>
          </div>
        </div>
      </div>
    </main>
  );
};

// Enhanced Progress Page
const ProgressPage = ({ progress }) => {
  return (
    <main className="p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Learning Progress</h1>
        <p className="text-gray-600">Track your EMT-B certification journey</p>
      </div>

      {/* Progress Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <BookOpen className="w-8 h-8 text-blue-600" />
            <span className="text-2xl font-bold text-gray-900">{Math.round((progress.modulesCompleted / progress.totalModules) * 100)}%</span>
          </div>
          <h3 className="font-semibold text-gray-900">Modules Complete</h3>
          <p className="text-sm text-gray-600">{progress.modulesCompleted} of {progress.totalModules} modules</p>
          <div className="w-full bg-gray-200 rounded-full h-2 mt-3">
            <div 
              className="bg-blue-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${(progress.modulesCompleted / progress.totalModules) * 100}%` }}
            ></div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <FileText className="w-8 h-8 text-green-600" />
            <span className="text-2xl font-bold text-gray-900">{Math.round((progress.chaptersCompleted / progress.totalChapters) * 100)}%</span>
          </div>
          <h3 className="font-semibold text-gray-900">Chapters Complete</h3>
          <p className="text-sm text-gray-600">{progress.chaptersCompleted} of {progress.totalChapters} chapters</p>
          <div className="w-full bg-gray-200 rounded-full h-2 mt-3">
            <div 
              className="bg-green-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${(progress.chaptersCompleted / progress.totalChapters) * 100}%` }}
            ></div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <CheckCircle className="w-8 h-8 text-purple-600" />
            <span className="text-2xl font-bold text-gray-900">{progress.quizAverage}%</span>
          </div>
          <h3 className="font-semibold text-gray-900">Quiz Average</h3>
          <p className="text-sm text-gray-600">Overall performance</p>
          <div className="w-full bg-gray-200 rounded-full h-2 mt-3">
            <div 
              className="bg-purple-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${progress.quizAverage}%` }}
            ></div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <Clock className="w-8 h-8 text-orange-600" />
            <span className="text-2xl font-bold text-gray-900">{progress.studyTime}h</span>
          </div>
          <h3 className="font-semibold text-gray-900">Study Time</h3>
          <p className="text-sm text-gray-600">{progress.streak} day streak 🔥</p>
        </div>
      </div>

      {/* Module Progress Detail */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-6">Module Progress Detail</h3>
        <div className="space-y-4">
          {moduleStructure.map((module) => {
            const completedChapters = module.chapters.filter(c => c.completed).length;
            const progressPercent = (completedChapters / module.chapters.length) * 100;
            
            return (
              <div key={module.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <span className="text-sm font-medium text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                      Module {module.id}
                    </span>
                    <h4 className="font-semibold text-gray-900">{module.title}</h4>
                  </div>
                  <span className="text-sm text-gray-500">
                    {completedChapters}/{module.chapters.length} chapters
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-blue-500 h-3 rounded-full transition-all duration-500"
                    style={{ width: `${progressPercent}%` }}
                  ></div>
                </div>
                <div className="mt-2 text-right">
                  <span className="text-sm font-medium text-gray-700">{Math.round(progressPercent)}%</span>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </main>
  );
};

// Remaining placeholder components
const ProtocolsPage = () => (
  <main className="p-6">
    <h1 className="text-3xl font-bold text-gray-900 mb-6">EMT-B Protocols</h1>
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="text-center py-8">
        <ClipboardList className="w-16 h-16 text-blue-600 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Protocol Database</h3>
        <p className="text-gray-600 mb-4">Complete EMT-B protocol library ready for integration.</p>
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <p className="text-blue-700">Comprehensive protocols including assessment algorithms, treatment guidelines, and decision trees will be integrated here.</p>
        </div>
      </div>
    </div>
  </main>
);

const FlashcardsPage = () => (
  <main className="p-6">
    <h1 className="text-3xl font-bold text-gray-900 mb-6">Study Flashcards</h1>
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="text-center py-8">
        <BookOpen className="w-16 h-16 text-purple-600 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Flashcard System</h3>
        <p className="text-gray-600 mb-4">Spaced repetition flashcards ready for integration.</p>
        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
          <p className="text-purple-700">Interactive flashcard system with spaced repetition algorithm for optimal learning retention.</p>
        </div>
      </div>
    </div>
  </main>
);

const QuizPage = () => (
  <main className="p-6">
    <h1 className="text-3xl font-bold text-gray-900 mb-6">Practice Quiz</h1>
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="text-center py-8">
        <CheckSquare className="w-16 h-16 text-green-600 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Quiz System</h3>
        <p className="text-gray-600 mb-4">Adaptive quiz system ready for integration.</p>
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <p className="text-green-700">Comprehensive quiz system with 500+ questions, adaptive difficulty, and detailed explanations.</p>
        </div>
      </div>
    </div>
  </main>
);

const SearchResultsPage = () => {
  const [searchParams] = useState(new URLSearchParams(window.location.search));
  const query = searchParams.get('q') || '';
 
  return (
    <main className="p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Search Results</h1>
        <p className="text-gray-600">Results for: "{query}"</p>
      </div>
     
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="text-center py-8">
          <Search className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Search Integration Ready</h3>
          <p className="text-gray-600 mb-4">Comprehensive database search will display results here, including protocols, medications, study materials, and clinical tools.</p>
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <p className="text-gray-700">Advanced search functionality across all 41 chapters, medications database, clinical tools, and protocols.</p>
          </div>
        </div>
      </div>
    </main>
  );
};

export default App;